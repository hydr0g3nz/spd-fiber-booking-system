// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/hydr0g3nz/spd-fiber-booking-system/models"
	mock "github.com/stretchr/testify/mock"
)

// BookingRepository is an autogenerated mock type for the BookingRepository type
type BookingRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, booking
func (_m *BookingRepository) Create(ctx context.Context, booking *models.Booking) (*models.Booking, error) {
	ret := _m.Called(ctx, booking)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Booking) (*models.Booking, error)); ok {
		return rf(ctx, booking)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Booking) *models.Booking); ok {
		r0 = rf(ctx, booking)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Booking) error); ok {
		r1 = rf(ctx, booking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *BookingRepository) GetAll(ctx context.Context) ([]*models.Booking, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*models.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*models.Booking, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Booking); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *BookingRepository) GetByID(ctx context.Context, id int64) (*models.Booking, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.Booking, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Booking); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, booking
func (_m *BookingRepository) Update(ctx context.Context, booking *models.Booking) (*models.Booking, error) {
	ret := _m.Called(ctx, booking)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Booking
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Booking) (*models.Booking, error)); ok {
		return rf(ctx, booking)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Booking) *models.Booking); ok {
		r0 = rf(ctx, booking)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Booking)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Booking) error); ok {
		r1 = rf(ctx, booking)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBookingRepository creates a new instance of BookingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBookingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BookingRepository {
	mock := &BookingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
